replicaCount: 1

image:
  repository: netdata/netdata
  tag: v1.22.1
  pullPolicy: Always

sysctlImage:
  enabled: false
  repository: alpine
  tag: latest
  pullPolicy: Always
  command: []
  resources: {}

service:
  type: ClusterIP
  port: 19999
  # Use a static loadBalancerIP. Only to be used with type LoadBalancer
  # loadBalancerIP: 10.0.1.69

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
  path: /
  hosts:
    - netdata.k8s.local
#  tls:
#    - secretName: netdata-tls
#      hosts:
#        - netdata.k8s.local

rbac:
  create: true
  pspEnabled: true

serviceAccount:
  create: true
  name: netdata


master:
  resources: {}
    # limits:
    #  cpu: 4
    #  memory: 4096Mi
    # requests:
    #  cpu: 4
    #  memory: 4096Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

  priorityClassName: ""

  env: {}
    # To disable anonymous statistics:
    # DO_NOT_TRACK: 1

  podLabels: {}

  podAnnotations: {}

  database:
    persistence: true
    # Set '-' as the storageclass to get a volume from the default storage class.
    storageclass: "-"
    volumesize: 2Gi

  alarms:
    persistence: true
    # Set '-' as the storageclass to get a volume from the default storage class.
    storageclass: "-"
    volumesize: 100Mi

  configs:
    stream:
      enabled: true
      path: /etc/netdata/stream.conf
      data: |
        [11111111-2222-3333-4444-555555555555]
          enabled = yes
          history = 3600
          default memory mode = save
          health enabled by default = auto
          allow from = *
    netdata:
      enabled: true
      path: /etc/netdata/netdata.conf
      data: |
        [global]
          memory mode = save
          bind to = 0.0.0.0:19999
        [plugins]
          cgroups = no
          tc = no
          enable running new plugins = no
          check for new plugins every = 72000
          python.d = no
          charts.d = no
          go.d = no
          node.d = no
          apps = no
          proc = no
          idlejitter = no
          diskspace = no
    health:
      enabled: true
      path: /etc/netdata/health_alarm_notify.conf
      data: |
        SEND_EMAIL="NO"
        SEND_SLACK="YES"
        SLACK_WEBHOOK_URL=""
        DEFAULT_RECIPIENT_SLACK=""
        role_recipients_slack[sysadmin]="${DEFAULT_RECIPIENT_SLACK}"
        role_recipients_slack[domainadmin]="${DEFAULT_RECIPIENT_SLACK}"
        role_recipients_slack[dba]="${DEFAULT_RECIPIENT_SLACK}"
        role_recipients_slack[webmaster]="${DEFAULT_RECIPIENT_SLACK}"
        role_recipients_slack[proxyadmin]="${DEFAULT_RECIPIENT_SLACK}"
        role_recipients_slack[sitemgr]="${DEFAULT_RECIPIENT_SLACK}"
    example:
      enabled: false
      path: /etc/netdata/health.d/example.conf
      data: |
        alarm: example_alarm1
          on: example.random
        every: 2s
        warn: $random1 > (($status >= $WARNING)  ? (70) : (80))
        crit: $random1 > (($status == $CRITICAL) ? (80) : (90))
        info: random
          to: sysadmin

slave:
  enabled: true
  resources: {}
    # limits:
    #  cpu: 4
    #  memory: 4096Mi
    # requests:
    #  cpu: 4
    #  memory: 4096Mi

  nodeSelector: {}

  tolerations:
    - operator: Exists
      effect: NoSchedule

  affinity: {}

  priorityClassName: ""

  podLabels: {}

  podAnnotationAppArmor:
    enabled: true

  podAnnotations: {}

  persistUniqueID: true

  configs:
    netdata:
      enabled: true
      path: /etc/netdata/netdata.conf
      data: |
        [global]
          memory mode = none
        [health]
          enabled = no
    stream:
      enabled: true
      path: /etc/netdata/stream.conf
      data: |
        [stream]
          enabled = yes
          destination = netdata:19999
          api key = 11111111-2222-3333-4444-555555555555
          timeout seconds = 60
          buffer size bytes = 1048576
          reconnect delay seconds = 5
          initial clock resync iterations = 60
    go.d:
      enabled: true
      path: /etc/netdata/go.d.conf
      data: |
        modules:
          apache: yes
          bind: yes
          freeradius: yes
          lighttpd: yes
          mysql: yes
          nginx: yes
          openvpn: yes
          phpfpm: yes
          rabbitmq: yes
    kubelet:
      enabled: true
      path: /etc/netdata/go.d/k8s_kubelet.conf
      data: |
        update_every: 1
        autodetection_retry: 0
        jobs:
          - url: http://127.0.0.1:10255/metrics
          - url: https://localhost:10250/metrics
            tls_skip_verify: yes
    kubeproxy:
      enabled: true
      path: /etc/netdata/go.d/k8s_kubeproxy.conf
      data: |
        update_every: 1
        autodetection_retry: 0
        jobs:
          - url: http://127.0.0.1:10249/metrics

  env: {}
    # To disable anonymous statistics:
    # DO_NOT_TRACK: 1

sd:
  repository: netdata/agent-sd
  tag: latest
  pullPolicy: Always
  slave:
    enabled: true
    cmap_name: netdata-slave-sd-config-map
    cmap_key: config.yml
    config:
      name: kubernetes
      discovery:
        k8s:
          - tags: unknown
            role: pod
            local_mode: true
      tag:
        - selector: unknown
          tags: -unknown go.d
          match:
            - tags: activemq
              cond: '{{ and (equal .Port "8161") (glob .Image "*/activemq*") }}'
            - tags: apache
              cond: '{{ and (equal .Port "80" "8080") (glob .Image "httpd:*" "*/httpd*") }}'
            - tags: bind
              cond: '{{ and (equal .Port "8653") (glob .Image "*/bind*") }}'
            - tags: cockroachdb
              cond: '{{ and (equal .Port "8080") (glob .Image "*/cockroach*") }}'
            - tags: consul
              cond: '{{ and (equal .Port "8500") (glob .Image "consul:*" "*/consul*") }}'
            - tags: coredns
              cond: '{{ and (equal .Port "9153") (glob .Image "*/coredns*") }}'
            - tags: fluentd
              cond: '{{ and (equal .Port "24220") (glob .Image "fluentd:*" "*/fluentd*") }}'
            - tags: freeradius
              cond: '{{ and (equal .Port "18121") (glob .Image "*/freeradius*") }}'
            - tags: hdfs
              cond: '{{ and (equal .Port "50070") (glob .Image "*/hdfs*") }}'
            - tags: lighttpd
              cond: '{{ and (equal .Port "80" "8080") (glob .Image "*/lighttpd*") }}'
            - tags: lighttpd2
              cond: '{{ and (equal .Port "80" "8080") (glob .Image "*/lighttpd2*") }}'
            - tags: logstash
              cond: '{{ and (equal .Port "9600") (glob .Image "logstash:*" "*/logstash*") }}'
            - tags: mysql
              cond: '{{ and (equal .Port "3306") (glob .Image "mysql:*" "*/mysql*" "mariadb:*" "*/mariadb*") }}'
            - tags: nginx
              cond: '{{ and (equal .Port "80" "8080") (glob .Image "nginx:*" "*/nginx*") }}'
            - tags: openvpn
              cond: '{{ and (equal .Port "7505") (glob .Image "*/openvpn") }}'
            - tags: phpfpm
              cond: '{{ and (equal .Port "80" "8080") (glob .Image "*/phpfpm*" "*/php-fpm*") }}'
            - tags: pulsar
              cond: '{{ and (equal .Port "8080") (glob .Image "*/pulsar*") }}'
            - tags: rabbitmq
              cond: '{{ and (equal .Port "15672") (glob .Image "rabbitmq:*" "*/rabbitmq*") }}'
            - tags: solr
              cond: '{{ and (equal .Port "8983") (glob .Image "solr:*" "*/solr*") }}'
            - tags: tengine
              cond: '{{ and (equal .Port "80" "8080") (glob .Image "*/tengine*") }}'
            - tags: unbound
              cond: '{{ and (equal .Port "8953") (glob .Image "*/unbound*") }}'
            - tags: vernemq
              cond: '{{ and (equal .Port "8888") (glob .Image "*/vernemq*") }}'
            - tags: zookeeper
              cond: '{{ and (equal .Port "2181") (glob .Image "zookeeper:*" "*/zookeeper*") }}'
      build:
        - selector: "!unknown go.d"
          tags: file go.d
          apply:
            - selector: activemq
              template: |
                - module: activemq
                  name: activemq-{{.TUID}}
                  url: http://{{.Address}}
            - selector: apache
              template: |
                - module: apache
                  name: apache-{{.TUID}}
                  url: http://{{.Address}}/server-status?auto
            - selector: bind
              template: |
                - module: bind
                  name: bind-{{.TUID}}
                  url: http://{{.Address}}/json/v1
            - selector: cockroachdb
              template: |
                - module: cockroachdb
                  name: cockroachdb-{{.TUID}}
                  url: http://{{.Address}}/_status/vars
            - selector: consul
              template: |
                - module: consul
                  name: consul-{{.TUID}}
                  url: http://{{.Address}}
            - selector: coredns
              template: |
                - module: coredns
                  name: coredns-{{.TUID}}
                  url: http://{{.Address}}/metrics
            - selector: fluentd
              template: |
                - module: fluentd
                  name: fluentd-{{.TUID}}
                  url: http://{{.Address}}
            - selector: freeradius
              template: |
                - module: freeradius
                  name: freeradius-{{.TUID}}
                  address: {{.PodIP}}
                  port: {{.Port}}
            - selector: hdfs
              template: |
                - module: hdfs
                  name: hdfs-{{.TUID}}
                  url: http://{{.Address}}/jmx
            - selector: lighttpd
              template: |
                - module: lighttpd
                  name: lighttpd-{{.TUID}}
                  url: http://{{.Address}}/server-status?auto
            - selector: lighttpd2
              template: |
                - module: lighttpd2
                  name: lighttpd2-{{.TUID}}
                  url: http://{{.Address}}/server-status?format=plain
            - selector: logstash
              template: |
                - module: logstash
                  name: logstash-{{.TUID}}
                  url: http://{{.Address}}
            - selector: mysql
              template: |
                - module: mysql
                  name: mysql-{{.TUID}}
                  dsn: 'netdata@tcp({{.Address}})/'
            - selector: nginx
              template: |
                - module: nginx
                  name: nginx-{{.TUID}}
                  url: http://{{.Address}}/stub_status
            - selector: openvpn
              template: |
                - module: openvpn
                  name: openvpn-{{.TUID}}
                  address: {{.Address}}
            - selector: phpfpm
              template: |
                - module: phpfpm
                  name: phpfpm-{{.TUID}}
                  url: http://{{.Address}}/status?full&json
            - selector: pulsar
              template: |
                - module: pulsar
                  name: pulsar-{{.TUID}}
                  url: http://{{.Address}}/metrics
            - selector: rabbitmq
              template: |
                - module: rabbitmq
                  name: rabbitmq-{{.TUID}}
                  url: http://{{.Address}}
            - selector: solr
              template: |
                - module: solr
                  name: solr-{{.TUID}}
                  url: http://{{.Address}}
            - selector: tengine
              template: |
                - module: tengine
                  name: tengine-{{.TUID}}
                  url: http://{{.Address}}/us
            - selector: unbound
              template: |
                - module: unbound
                  name: unbound-{{.TUID}}
                  address: {{.Address}}
                  use_tls: false
            - selector: vernemq
              template: |
                - module: vernemq
                  name: vernemq-{{.TUID}}
                  url: http://{{.Address}}/metrics
            - selector: zookeeper
              template: |
                - module: zookeeper
                  name: zookeeper-{{.TUID}}
                  address: {{.Address}}
      export:
        file:
          - selector: file go.d
            filename: "export/go.d.yml"
